import javax.swing.*;
import javax.swing.event.ChangeEvent;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.font.TextAttribute;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import static java.awt.font.TextAttribute.UNDERLINE;
import static java.awt.font.TextAttribute.UNDERLINE_ON;


public class Main {

    public static void main(String[] args) {
	// write your code here

        new TextEditor();

    }

    private static class TextEditor extends JFrame implements ActionListener {

        JTextArea textArea;
        JScrollPane scrollPane;
        JSpinner fontSizeSpinner;

        JLabel label;
        JLabel label2;

        JButton fontColorButton;
        JButton bgColorButton;

        JButton Bold;
        JButton Italic;
        JButton Underline;
        ImageIcon icon = new ImageIcon("text-editor1.png");
        JComboBox<String> chooseFont;
        JMenuBar menuBar;
        JMenu fileMenu;
        JMenuItem newItem;
        JMenuItem openItem;
        JMenuItem saveItem;
        JMenuItem exitItem;

        TextEditor(){

            this.setDefaultCloseOperation(EXIT_ON_CLOSE);
            this.setTitle("GK Editor");
            this.setSize(650,600);
            this.setLayout(new FlowLayout());
            this.setLocationRelativeTo(null);
            this.setResizable(false);

            // this can create textarea of the text editor
            textArea = new JTextArea();
            textArea.setLineWrap(true);
            textArea.setWrapStyleWord(true);
            textArea.setFont(new Font("Arial", Font.PLAIN,12));

            fontSizeSpinner = new JSpinner();
            fontSizeSpinner.setValue(12);
            fontSizeSpinner.addChangeListener((ChangeEvent e) ->
                    textArea.setFont(new Font(textArea.getFont().getFamily(),Font.PLAIN,
                            (int) fontSizeSpinner.getValue())));

            fontColorButton = new JButton("FG");
            fontColorButton.addActionListener(this);

            Bold = new JButton("B");
            Bold.addActionListener(this);
            Italic = new JButton("I");
            Italic.addActionListener(this);
            Underline = new JButton("U");
            Underline.addActionListener(this);

            bgColorButton = new JButton("BG");
            bgColorButton.addActionListener(this);

            String[] fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().
                    getAvailableFontFamilyNames();

            chooseFont = new JComboBox<>(fonts);
            chooseFont.addActionListener(this);
            chooseFont.setSelectedItem("Arial");

            scrollPane = new JScrollPane(textArea);
            scrollPane.setPreferredSize(new Dimension(600,480));
            scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

            menuBar = new JMenuBar();
            fileMenu = new JMenu("File");

            newItem = new JMenuItem("New");
            openItem = new JMenuItem("Open");
            saveItem = new JMenuItem("Save");
            exitItem = new JMenuItem("Exit");

            menuBar.add(fileMenu);

            fileMenu.add(newItem);
            fileMenu.add(openItem);
            fileMenu.add(saveItem);
            fileMenu.add(exitItem);

            newItem.addActionListener(this);
            openItem.addActionListener(this);
            saveItem.addActionListener(this);
            exitItem.addActionListener(this);


            label = new JLabel("Font Size:");
            label.setSize(10,10);
            label2 = new JLabel("Font");
            label2.setSize(10,10);

            this.setJMenuBar(menuBar);
            this.add(label2);
            this.add(chooseFont);
            this.add(Bold);
            this.add(Italic);
            this.add(Underline);
            this.add(label);
            this.add(fontSizeSpinner);
            this.add(bgColorButton);
            this.add(fontColorButton);
            this.add(scrollPane);
            this.setVisible(true);
            this.setIconImage(icon.getImage());

        }

        @Override
        public void actionPerformed(ActionEvent e) {

            if(e.getSource() == fontColorButton){
                JColorChooser colorChooser = new JColorChooser();
                Color color = JColorChooser.showDialog(colorChooser,null,Color.BLACK);
                textArea.setForeground(color);
                fontColorButton.setBackground(color);
            }

            if(e.getSource() == bgColorButton){
                JColorChooser colorChooser = new JColorChooser();
                Color color = JColorChooser.showDialog(colorChooser,null,Color.WHITE);
                textArea.setBackground(color);
                bgColorButton.setBackground(color);
            }

            if(e.getSource()==chooseFont){
                textArea.setFont(new Font((String) chooseFont.getSelectedItem(),
                        Font.PLAIN,textArea.getFont().getSize()));
            }

            if(e.getSource() == Bold){
                textArea.setFont(new Font((String) chooseFont.getSelectedItem(),
                        Font.BOLD,textArea.getFont().getSize()));
            }

            if(e.getSource() == Italic){
                textArea.setFont(new Font((String) chooseFont.getSelectedItem(),
                        Font.ITALIC,textArea.getFont().getSize()));
            }

            if(e.getSource() == Underline) {
                Map<TextAttribute, Integer> fontAttributes = new HashMap<>();
                fontAttributes.put(UNDERLINE, UNDERLINE_ON);
                textArea.setFont(new Font((String) chooseFont.getSelectedItem(), Font.PLAIN,
                        textArea.getFont().getSize()).deriveFont(fontAttributes));
            }

            if(e.getSource() == newItem){
                new TextEditor();
            }

            if(e.getSource() == saveItem){
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setCurrentDirectory(new File("."));

                int response = fileChooser.showSaveDialog(null);

                if(response == JFileChooser.APPROVE_OPTION){
                    File file;

                    file = new File(fileChooser.getSelectedFile().getAbsolutePath());
                    try (PrintWriter fileOut = new PrintWriter(file)) {
                        fileOut.println(textArea.getText());
                    } catch (FileNotFoundException ex) {
                        ex.printStackTrace();
                    }
                }

            }

            if(e.getSource() == openItem){
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setCurrentDirectory(new File("."));

                int response = fileChooser.showOpenDialog(null);

                if(response == JFileChooser.APPROVE_OPTION){
                    File file;

                    file = new File(fileChooser.getSelectedFile().getAbsolutePath());
                    try (Scanner fileIn = new Scanner(file)) {
                        if (file.isFile()) {
                            while (fileIn.hasNextLine()) {
                                String line = fileIn.nextLine() + "/n";
                                textArea.append(line);
                            }
                        }
                    } catch (FileNotFoundException ex) {
                        ex.printStackTrace();
                    }
                }
            }

            if(e.getSource() == exitItem){
                System.exit(0);
            }

        }
    }
}
