public class Sorting_Algorithm {

    public static void main(String[] args){
        int[] arr = {18, 17, 19, 12, 13, 11, 15, 14, 16};
        BubbleSort(arr);
        SelectionSort(arr);
        InsertionSort(arr);
        mergeSort(arr);
        quickSort(arr,0,arr.length-1);
        for(int i : arr){
            System.out.print(i+" ");
        }
    }

    private static void quickSort(int[] arr, int start, int end) {
        if(end <= start) return;
        int pivot = partition(arr,start,end);
        quickSort(arr,start,pivot-1);
        quickSort(arr,pivot+1,end);
    }

    private static int partition(int[] arr, int start, int end) {
        int pivot = arr[end];
        int i = start-1;

        for(int j = start; j <= end; j++){
            if(arr[j] < pivot){
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        i++;
        int temp = arr[i];
        arr[i] = arr[end];
        arr[end] = temp;
        return i;
    }

    private static void mergeSort(int[] arr) {
        int length = arr.length;
        if(length <= 1) return;

        int middle = arr.length/2;
        int[] leftarr = new int[middle];
        int[] rightarr = new int[length-middle];

        int i=0,j=0;
        for(;i< arr.length;i++){
            if(i< arr.length/2){
                leftarr[i] = arr[i];
            }
            else {
                rightarr[j] = arr[i];
                j++;
            }
        }

        mergeSort(leftarr);
        mergeSort(rightarr);
        merge(leftarr,rightarr,arr);
    }

    private static void merge(int[] leftarr, int[] rightarr, int[] arr) {

        int leftSize = leftarr.length;
        int rightSize = rightarr.length;
        int i=0,l=0,r=0;

        while (l < leftSize && r <  rightSize){
            if(leftarr[l] < rightarr[r]){
                arr[i] = leftarr[l];
                i++;
                l++;
            }
            else {
                arr[i] = rightarr[r];
                i++;
                r++;
            }
        }

        while(l < leftSize) {
            arr[i] = leftarr[l];
            i++;
            l++;
        }
        while(r < rightSize) {
            arr[i] = rightarr[r];
            i++;
            r++;
        }

    }

    private static void InsertionSort(int[] arr) {
        for(int i=1; i< arr.length; i++){
            int temp = arr[i];
            int j = i-1;
            while(j>=0 && arr[j]>temp){
                arr[j+1] = arr[j];
                j--;
            }
            arr[j+1] = temp;
        }
    }

    private static void BubbleSort(int[] arr) {
        for(int i=0; i< arr.length-1; i++){
            for(int j=0; j< arr.length-i-1;j++){
                if(arr[j] > arr[j+1]){
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
    }

    private static void SelectionSort(int[] arr) {
        for(int i=0; i< arr.length-1; i++){
            int min = i;
            for(int j = i+1; j< arr.length; j++){
                if(arr[j] < arr[min]) min = j;
            }
            int temp = arr[i];
            arr[i] = arr[min];
            arr[min] = temp;
        }
    }
}
